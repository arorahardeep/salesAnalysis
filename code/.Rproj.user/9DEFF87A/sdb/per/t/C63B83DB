{
    "collab_server" : "",
    "contents" : "###\n# This is the model for predicting the SaleFlag and SaleCount for https://www.kaggle.com/flenderson/sales-analysis dataset\n# Author  : Hardeep Arora\n# Date    : 09-Dec-2017\n###\n\n# Libraries\nlibrary(data.table)\nlibrary(xgboost)\nlibrary(caret)\nlibrary(DMwR)\nlibrary(pROC)\nlibrary(ggplot2)\n\n# Read the data\ndf <- fread(\"../data/SalesKaggle3.csv\")\n\n# Separate it into Sales and Inventory data\nhistoricSales <- df[df$File_Type==\"Historical\",]\nactiveInv <- df[df$File_Type==\"Active\",]\n\ntarget.sales <- as.data.table(historicSales$SoldFlag)\ntarget.sales.count <- as.data.table(historicSales$SoldCount)\n\n# Columns to Exclude\ncols = c(\"File_Type\",\"Order\",\"SKU_number\")\nhistoricSales <- historicSales[,!cols,with=FALSE]\n\nhistoricSales[, `:=`(mic=mean(ItemCount)), by=ReleaseYear]\n\n# Convert MarketingType to numeric\nhistoricSales$MarketingType <- ifelse(historicSales$MarketingType == \"D\",1,2)\n\n# Standardize the data\n#historicSales <- as.data.table(scale(historicSales))\n\n# Balance the classes using oversampling\nhistoricSales$SoldFlag <- as.factor(historicSales$SoldFlag)\nhistoricSales1 <- SMOTE(SoldFlag ~ . , \n                       data= historicSales, perc.over = 100, perc.under = 200)\n\n#historicSales1 <- historicSales1[ItemCount < 150, ]\n\ntarget.sales <- as.data.table(as.numeric(as.character(historicSales1$SoldFlag)))\ntarget.sales.count <- as.data.table(historicSales1$SoldCount)\n\nhistoricSales <- historicSales1[,!c(\"SoldFlag\",\"SoldCount\"),with=FALSE]\n\n# Divide the data into train and test set (0.8,0.2)\ntestSize <- 0.2\nindexes = sample(1:nrow(historicSales), size=testSize*nrow(historicSales))\n\n# Split data\ntest <- historicSales[indexes,]\ntrain <- historicSales[-indexes,]\n\nlbl_train.sales <- target.sales[-indexes,]\nlbl_test.sales <- target.sales[indexes,]\n\nlbl_train.sales.count <- target.sales.count[-indexes,]\nlbl_test.sales.count <- target.sales.count[indexes,]\n\n\n# Train the model for SaleFlag Prediction\nnew_tr <- model.matrix(~.,data = train) \nnew_ts <- model.matrix(~.,data = test)\n\nlbl_train <- lbl_train.sales$V1\nlbl_test <- lbl_test.sales$V1\n\ndtrain <- xgb.DMatrix(data = new_tr,label = lbl_train) \ndtest <- xgb.DMatrix(data = new_ts,label=lbl_test)\n\nparams <- list(booster = \"gbtree\", \n               objective = \"binary:logistic\", \n               eta=0.01, \n               gamma=0, \n               max_depth=7, \n               min_child_weight=1, \n               subsample=1, \n               colsample_bytree=1)\n\nset.seed(101)\nxgb.sales <- xgb.train (params = params, \n                   data = dtrain, \n                   nrounds = 510, \n                   watchlist = list(val=dtest,train=dtrain), \n                   print_every_n = 10, \n                   early_stopping_rounds = 10, \n                   maximize = T , \n                   eval_metric = \"auc\")\n\nmat <- xgb.importance (feature_names = colnames(new_tr),model = xgb.sales)\nxgb.plot.importance (importance_matrix = mat) \n\nxgbpred <- predict (xgb.sales,dtest)\nplot(pROC::roc(response = lbl_test.sales$V1,\n               predictor = xgbpred,\n               levels=c(0, 1)),lwd=1.5)\n\ntest$pred <- xgbpred\n\nggplot(test, aes(x=pred, colour =factor(lbl_test.sales$V1), \n                 fill = factor(lbl_test.sales$V1), alpha = 0.3)) + \n  geom_density()\n\nxgbpred <- ifelse (xgbpred > 0.5,1,0)\nconfusionMatrix (xgbpred, lbl_test)\n\n# Train the model for SaleCount Prediction\nnew_tr <- model.matrix(~.,data = train) \nnew_ts <- model.matrix(~.,data = test)\n\nlbl_train <- lbl_train.sales.count$V1\nlbl_test <- lbl_test.sales.count$V1\n\ndtrain <- xgb.DMatrix(data = new_tr,label = lbl_train) \ndtest <- xgb.DMatrix(data = new_ts,label=lbl_test)\n\nparams <- list(booster = \"gbtree\", \n               objective = \"reg:linear\", \n               eta=0.1, \n               gamma=0, \n               max_depth=7, \n               min_child_weight=1, \n               subsample=1, \n               colsample_bytree=1)\n\nset.seed(101)\nxgb.sales.count <- xgb.train (params = params, \n                        data = dtrain, \n                        nrounds = 1510, \n                        watchlist = list(val=dtest,train=dtrain), \n                        print_every_n = 10, \n                        #early_stopping_rounds = 10, \n                        maximize = T , \n                        eval_metric = \"rmse\")\n\nmat <- xgb.importance (feature_names = colnames(new_tr),model = xgb.sales.count)\nxgb.plot.importance (importance_matrix = mat) \n\nxgbpred <- predict (xgb.sales.count,dtest)\n\ntest1 <- test\ntest1$SoldCount <- lbl_test\ntest1$PredSC <- ifelse(xgbpred < 0.1, 0, xgbpred)\n\n### Predict Sale on the Inventory\ncols = c(\"File_Type\",\"Order\",\"SKU_number\",\"SoldCount\",\"SoldFlag\")\nactiveInv <- activeInv[,!cols,with=FALSE]\n\n# Convert MarketingType to numeric\nactiveInv$MarketingType <- ifelse(activeInv$MarketingType == \"D\",1,2)\n\nnew_inv <- model.matrix(~.,data = activeInv)\ndinv <- xgb.DMatrix(data = new_inv)\nxgbpredInv <- predict (xgb.sales,dinv)\nxgbpredInv <- ifelse (xgbpredInv > 0.5,1,0)\nactiveInv$SoldFlag <- xgbpredInv\nsalesCount <- predict (xgb.sales.count,dinv)\nactiveInv$SoldCount <- ifelse(salesCount < 0.1, 0, salesCount)\n\n\n\n",
    "created" : 1512785807699.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2221458750",
    "id" : "C63B83DB",
    "lastKnownWriteTime" : 1512833929,
    "last_content_update" : 1512833929059,
    "path" : "~/Documents/DataScience/Kaggle/BRIGHTSTAR/code/BasicModel.R",
    "project_path" : "BasicModel.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}