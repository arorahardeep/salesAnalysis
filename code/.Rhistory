ggplot(historicSales, aes(x = factor(SoldFlag), y = ItemCount,
colour = factor(SoldFlag))) + geom_boxplot() +
xlab("Sales Flag") + ylab("Item Count")+ ylim(0,400) +
ggtitle("Item Count Boxplot")
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(corrplot)
library(xgboost)
library(caret)
library(DMwR)
library(pROC)
library(ggplot2)
set.seed(2017)
# Read the data
df <- fread("../data/SalesKaggle3.csv")
# Separate it into Sales and Inventory data
historicSales <- df[df$File_Type=="Historical",]
activeInv <- df[df$File_Type=="Active",]
dim(historicSales)
dim(activeInv)
colnames(historicSales)
ftable(historicSales$SoldFlag)
ggplot(historicSales, aes(x =  PriceReg, fill = factor(SoldFlag))) +
geom_density(alpha = 0.5) + xlim(c(0,1000)) +xlab("Price") +
ylab("density") + ggtitle("Price density") + xlim(c(0,450))
ggplot(historicSales, aes(x = factor(SoldFlag), y = PriceReg,
colour = factor(SoldFlag))) + geom_boxplot() +
xlab("Sales Flag") + ylab("Price Reg")+ ylim(0,400) +
ggtitle("Price Reg Boxplot")
# Convert MarketingType to numeric
historicSales$MarketingType <- ifelse(historicSales$MarketingType == "D",1,2)
corrplot(cor(scale(historicSales[,!c("File_Type")])), method="circle")
ggplot(historicSales, aes(x = factor(SoldFlag), y = ItemCount,
colour = factor(SoldFlag))) + geom_boxplot() +
xlab("Sales Flag") + ylab("Item Count")+ ylim(0,400) +
ggtitle("Item Count Boxplot")
# Columns to Exclude
cols = c("File_Type","Order","SKU_number","New_Release_Flag")
historicSales <- historicSales[,!cols,with=FALSE]
# Balance the classes using oversampling
historicSales$SoldFlag <- as.factor(historicSales$SoldFlag)
historicSales1 <- SMOTE(SoldFlag ~ . ,
data= historicSales, perc.over = 100, perc.under = 200)
target.sales <- as.data.table(as.numeric(as.character(historicSales1$SoldFlag)))
target.sales.count <- as.data.table(historicSales1$SoldCount)
historicSales <- historicSales1
ftable(historicSales$SoldFlag)
historicSales <- historicSales[,!c("SoldFlag","SoldCount"),with=FALSE]
# Divide the data into train and test set (0.8,0.2)
testSize <- 0.2
indexes = sample(1:nrow(historicSales), size=testSize*nrow(historicSales))
# Split data
test <- historicSales[indexes,]
train <- historicSales[-indexes,]
lbl_train.sales <- target.sales[-indexes,]
lbl_test.sales <- target.sales[indexes,]
lbl_train.sales.count <- target.sales.count[-indexes,]
lbl_test.sales.count <- target.sales.count[indexes,]
# Train the model for SaleFlag Prediction
new_tr <- model.matrix(~.,data = train)
new_ts <- model.matrix(~.,data = test)
lbl_train <- lbl_train.sales$V1
lbl_test <- lbl_test.sales$V1
dtrain <- xgb.DMatrix(data = new_tr,label = lbl_train)
dtest <- xgb.DMatrix(data = new_ts,label=lbl_test)
params <- list(booster = "gbtree",
objective = "binary:logistic",
eta=0.01,
gamma=0,
max_depth=7,
min_child_weight=1,
subsample=1,
colsample_bytree=1)
set.seed(101)
xgb.sales <- xgb.train (params = params,
data = dtrain,
nrounds = 510,
watchlist = list(val=dtest,train=dtrain),
print_every_n = 10,
early_stopping_rounds = 10,
maximize = T ,
eval_metric = "auc")
mat <- xgb.importance (feature_names = colnames(new_tr),model = xgb.sales)
xgb.plot.importance (importance_matrix = mat)
xgbpred <- predict (xgb.sales,dtest)
test$pred <- xgbpred
ggplot(test, aes(x=pred, colour =factor(lbl_test.sales$V1),
fill = factor(lbl_test.sales$V1), alpha = 0.3)) +
geom_density()
plot(pROC::roc(response = lbl_test.sales$V1,
predictor = xgbpred,
levels=c(0, 1)),lwd=1.5)
xgbpred <- ifelse (xgbpred > 0.5,1,0)
confusionMatrix (xgbpred, lbl_test)
new_tr <- model.matrix(~.,data = train)
new_ts <- model.matrix(~.,data = test)
lbl_train <- lbl_train.sales.count$V1
lbl_test <- lbl_test.sales.count$V1
dtrain <- xgb.DMatrix(data = new_tr,label = lbl_train)
dtest <- xgb.DMatrix(data = new_ts,label=lbl_test)
params <- list(booster = "gbtree",
objective = "reg:linear",
eta=0.1,
gamma=0,
max_depth=7,
min_child_weight=1,
subsample=1,
colsample_bytree=1)
set.seed(101)
xgb.sales.count <- xgb.train (params = params,
data = dtrain,
nrounds = 1510,
watchlist = list(val=dtest,train=dtrain),
print_every_n = 10,
#early_stopping_rounds = 10,
maximize = T ,
eval_metric = "rmse")
mat <- xgb.importance (feature_names = colnames(new_tr),model = xgb.sales.count)
xgb.plot.importance (importance_matrix = mat)
xgbpred <- predict (xgb.sales.count,dtest)
test1 <- test
test1$SoldCount <- lbl_test
test1$PredSC <- ifelse(xgbpred < 0.1, 0, xgbpred)
head(test1[,c("SoldCount","PredSC"),with=FALSE])
### Predict Sale on the Inventory
cols = c("File_Type","Order","SKU_number","SoldCount","SoldFlag")
activeInv <- activeInv[,!cols,with=FALSE]
# Convert MarketingType to numeric
activeInv$MarketingType <- ifelse(activeInv$MarketingType == "D",1,2)
new_inv <- model.matrix(~.,data = activeInv)
dinv <- xgb.DMatrix(data = new_inv)
xgbpredInv <- predict (xgb.sales,dinv)
xgbpredInv <- ifelse (xgbpredInv > 0.5,1,0)
activeInv$SoldFlag <- xgbpredInv
salesCount <- predict (xgb.sales.count,dinv)
activeInv$SoldCount <- ifelse(salesCount < 0.1, 0, salesCount)
invSample <- df[df$File_Type=="Active",]
invSample$SoldFlag <- activeInv$SoldFlag
invSample$SoldCount <- activeInv$SoldCount
head(invSample[,c("SKU_number","SoldFlag","SoldCount"),with=FALSE])
df <- fread("../data/SalesKaggle3.csv")
historicSales <- df[df$File_Type=="Historical",]
activeInv <- df[df$File_Type=="Active",]
target.sales <- as.data.table(historicSales$SoldFlag)
target.sales.count <- as.data.table(historicSales$SoldCount)
cols = c("File_Type","Order","SKU_number")
historicSales <- historicSales[,!cols,with=FALSE]
historicSales$MarketingType <- ifelse(historicSales$MarketingType == "D",1,2)
historicSales$SoldFlag <- as.factor(historicSales$SoldFlag)
historicSales1 <- SMOTE(SoldFlag ~ . ,
data= historicSales, perc.over = 100, perc.under = 200)
historicSales1 <- historicSales1[ItemCount < 150, , with=FALSE]
historicSales1 <- historicSales1[ItemCount < 150, ]
target.sales <- as.data.table(as.numeric(as.character(historicSales1$SoldFlag)))
target.sales.count <- as.data.table(historicSales1$SoldCount)
historicSales <- historicSales1[,!c("SoldFlag","SoldCount"),with=FALSE]
testSize <- 0.2
indexes = sample(1:nrow(historicSales), size=testSize*nrow(historicSales))
test <- historicSales[indexes,]
train <- historicSales[-indexes,]
lbl_train.sales <- target.sales[-indexes,]
lbl_test.sales <- target.sales[indexes,]
lbl_train.sales.count <- target.sales.count[-indexes,]
lbl_test.sales.count <- target.sales.count[indexes,]
new_tr <- model.matrix(~.,data = train)
new_ts <- model.matrix(~.,data = test)
lbl_train <- lbl_train.sales$V1
lbl_test <- lbl_test.sales$V1
dtrain <- xgb.DMatrix(data = new_tr,label = lbl_train)
dtest <- xgb.DMatrix(data = new_ts,label=lbl_test)
params <- list(booster = "gbtree",
objective = "binary:logistic",
eta=0.01,
gamma=0,
max_depth=7,
min_child_weight=1,
subsample=1,
colsample_bytree=1)
set.seed(101)
xgb.sales <- xgb.train (params = params,
data = dtrain,
nrounds = 510,
watchlist = list(val=dtest,train=dtrain),
print_every_n = 10,
early_stopping_rounds = 10,
maximize = T ,
eval_metric = "auc")
mat <- xgb.importance (feature_names = colnames(new_tr),model = xgb.sales)
xgb.plot.importance (importance_matrix = mat)
xgbpred <- predict (xgb.sales,dtest)
plot(pROC::roc(response = lbl_test.sales$V1,
predictor = xgbpred,
levels=c(0, 1)),lwd=1.5)
test$pred <- xgbpred
ggplot(test, aes(x=pred, colour =factor(lbl_test.sales$V1),
fill = factor(lbl_test.sales$V1), alpha = 0.3)) +
geom_density()
xgbpred <- ifelse (xgbpred > 0.5,1,0)
confusionMatrix (xgbpred, lbl_test)
testSize <- 0.3
indexes = sample(1:nrow(historicSales), size=testSize*nrow(historicSales))
test <- historicSales[indexes,]
train <- historicSales[-indexes,]
lbl_train.sales <- target.sales[-indexes,]
lbl_test.sales <- target.sales[indexes,]
lbl_train.sales.count <- target.sales.count[-indexes,]
lbl_test.sales.count <- target.sales.count[indexes,]
new_tr <- model.matrix(~.,data = train)
new_ts <- model.matrix(~.,data = test)
lbl_train <- lbl_train.sales$V1
lbl_test <- lbl_test.sales$V1
dtrain <- xgb.DMatrix(data = new_tr,label = lbl_train)
dtest <- xgb.DMatrix(data = new_ts,label=lbl_test)
params <- list(booster = "gbtree",
objective = "binary:logistic",
eta=0.01,
gamma=0,
max_depth=7,
min_child_weight=1,
subsample=1,
colsample_bytree=1)
set.seed(101)
xgb.sales <- xgb.train (params = params,
data = dtrain,
nrounds = 510,
watchlist = list(val=dtest,train=dtrain),
print_every_n = 10,
early_stopping_rounds = 10,
maximize = T ,
eval_metric = "auc")
mat <- xgb.importance (feature_names = colnames(new_tr),model = xgb.sales)
xgb.plot.importance (importance_matrix = mat)
xgbpred <- predict (xgb.sales,dtest)
plot(pROC::roc(response = lbl_test.sales$V1,
predictor = xgbpred,
levels=c(0, 1)),lwd=1.5)
test$pred <- xgbpred
ggplot(test, aes(x=pred, colour =factor(lbl_test.sales$V1),
fill = factor(lbl_test.sales$V1), alpha = 0.3)) +
geom_density()
xgbpred <- ifelse (xgbpred > 0.5,1,0)
confusionMatrix (xgbpred, lbl_test)
testSize <- 0.1
indexes = sample(1:nrow(historicSales), size=testSize*nrow(historicSales))
test <- historicSales[indexes,]
train <- historicSales[-indexes,]
lbl_train.sales <- target.sales[-indexes,]
lbl_test.sales <- target.sales[indexes,]
lbl_train.sales.count <- target.sales.count[-indexes,]
lbl_test.sales.count <- target.sales.count[indexes,]
new_tr <- model.matrix(~.,data = train)
new_ts <- model.matrix(~.,data = test)
lbl_train <- lbl_train.sales$V1
lbl_test <- lbl_test.sales$V1
dtrain <- xgb.DMatrix(data = new_tr,label = lbl_train)
dtest <- xgb.DMatrix(data = new_ts,label=lbl_test)
params <- list(booster = "gbtree",
objective = "binary:logistic",
eta=0.01,
gamma=0,
max_depth=7,
min_child_weight=1,
subsample=1,
colsample_bytree=1)
set.seed(101)
xgb.sales <- xgb.train (params = params,
data = dtrain,
nrounds = 510,
watchlist = list(val=dtest,train=dtrain),
print_every_n = 10,
early_stopping_rounds = 10,
maximize = T ,
eval_metric = "auc")
mat <- xgb.importance (feature_names = colnames(new_tr),model = xgb.sales)
xgb.plot.importance (importance_matrix = mat)
xgbpred <- predict (xgb.sales,dtest)
plot(pROC::roc(response = lbl_test.sales$V1,
predictor = xgbpred,
levels=c(0, 1)),lwd=1.5)
test$pred <- xgbpred
ggplot(test, aes(x=pred, colour =factor(lbl_test.sales$V1),
fill = factor(lbl_test.sales$V1), alpha = 0.3)) +
geom_density()
xgbpred <- ifelse (xgbpred > 0.5,1,0)
confusionMatrix (xgbpred, lbl_test)
df <- fread("../data/SalesKaggle3.csv")
historicSales <- df[df$File_Type=="Historical",]
activeInv <- df[df$File_Type=="Active",]
summary(historicSales)
historicSales$YearSince <- 2017 - historicSales$ReleaseYear
View(historicSales)
cols = c("File_Type","MarketingType")
head(scale(historicSales[,!cols,with=FALSE]))
M <- cor(scale(historicSales[,!cols,with=FALSE]))
corrplot(M, method="number")
historicSales <- df[df$File_Type=="Historical",]
historicSales$StrByYear <- historicSales$StrengthFactor / historicSales$ReleaseYear
View(historicSales)
cols = c("File_Type","MarketingType")
head(scale(historicSales[,!cols,with=FALSE]))
M <- cor(scale(historicSales[,!cols,with=FALSE]))
corrplot(M, method="number")
historicSales <- df[df$File_Type=="Historical",]
activeInv <- df[df$File_Type=="Active",]
target.sales <- as.data.table(historicSales$SoldFlag)
target.sales.count <- as.data.table(historicSales$SoldCount)
cols = c("File_Type","Order")
historicSales <- historicSales[,!cols,with=FALSE]
historicSales$MarketingType <- ifelse(historicSales$MarketingType == "D",1,2)
historicSales$SoldFlag <- as.factor(historicSales$SoldFlag)
historicSales1 <- SMOTE(SoldFlag ~ . ,
data= historicSales, perc.over = 100, perc.under = 200)
historicSales1 <- historicSales1[ItemCount < 150, ]
target.sales <- as.data.table(as.numeric(as.character(historicSales1$SoldFlag)))
target.sales.count <- as.data.table(historicSales1$SoldCount)
historicSales <- historicSales1[,!c("SoldFlag","SoldCount"),with=FALSE]
View(historicSales)
testSize <- 0.2
indexes = sample(1:nrow(historicSales), size=testSize*nrow(historicSales))
test <- historicSales[indexes,]
train <- historicSales[-indexes,]
lbl_train.sales <- target.sales[-indexes,]
lbl_test.sales <- target.sales[indexes,]
lbl_train.sales.count <- target.sales.count[-indexes,]
lbl_test.sales.count <- target.sales.count[indexes,]
new_tr <- model.matrix(~.,data = train)
new_ts <- model.matrix(~.,data = test)
lbl_train <- lbl_train.sales$V1
lbl_test <- lbl_test.sales$V1
dtrain <- xgb.DMatrix(data = new_tr,label = lbl_train)
dtest <- xgb.DMatrix(data = new_ts,label=lbl_test)
params <- list(booster = "gbtree",
objective = "binary:logistic",
eta=0.01,
gamma=0,
max_depth=7,
min_child_weight=1,
subsample=1,
colsample_bytree=1)
set.seed(101)
xgb.sales <- xgb.train (params = params,
data = dtrain,
nrounds = 510,
watchlist = list(val=dtest,train=dtrain),
print_every_n = 10,
early_stopping_rounds = 10,
maximize = T ,
eval_metric = "auc")
mat <- xgb.importance (feature_names = colnames(new_tr),model = xgb.sales)
xgb.plot.importance (importance_matrix = mat)
historicSales <- df[df$File_Type=="Historical",]
activeInv <- df[df$File_Type=="Active",]
summary(historicSales)
length(unique(historicSales$SKU_number))
length(unique(activeInv$SKU_number))
setdiff(activeInv$SKU_number,historicSales$SKU_number)
invSalesRecord <- activeInv[activeInv$SKU_number %in% historicSales$SKU_number,]
historicSales$StrByYear <- historicSales$StrengthFactor / historicSales$ReleaseYear
cols = c("File_Type","MarketingType")
head(scale(historicSales[,!cols,with=FALSE]))
M <- cor(scale(historicSales[,!cols,with=FALSE]))
corrplot(M, method="number")
historicSales[, `:=`(mean(StrengthFactor), by=ReleaseYear)]
historicSales[, `:=`(msf=mean(StrengthFactor)), by=ReleaseYear]
View(historicSales)
cols = c("File_Type","MarketingType")
head(scale(historicSales[,!cols,with=FALSE]))
M <- cor(scale(historicSales[,!cols,with=FALSE]))
corrplot(M, method="number")
df <- fread("../data/SalesKaggle3.csv")
historicSales <- df[df$File_Type=="Historical",]
activeInv <- df[df$File_Type=="Active",]
target.sales <- as.data.table(historicSales$SoldFlag)
target.sales.count <- as.data.table(historicSales$SoldCount)
cols = c("File_Type","Order","SKU_number")
historicSales <- historicSales[,!cols,with=FALSE]
historicSales[, `:=`(msf=mean(StrengthFactor)), by=ReleaseYear]
historicSales$MarketingType <- ifelse(historicSales$MarketingType == "D",1,2)
historicSales$SoldFlag <- as.factor(historicSales$SoldFlag)
historicSales1 <- SMOTE(SoldFlag ~ . ,
data= historicSales, perc.over = 100, perc.under = 200)
historicSales1 <- historicSales1[ItemCount < 150, ]
target.sales <- as.data.table(as.numeric(as.character(historicSales1$SoldFlag)))
target.sales.count <- as.data.table(historicSales1$SoldCount)
historicSales <- historicSales1[,!c("SoldFlag","SoldCount"),with=FALSE]
testSize <- 0.2
indexes = sample(1:nrow(historicSales), size=testSize*nrow(historicSales))
test <- historicSales[indexes,]
train <- historicSales[-indexes,]
lbl_train.sales <- target.sales[-indexes,]
lbl_test.sales <- target.sales[indexes,]
lbl_train.sales.count <- target.sales.count[-indexes,]
lbl_test.sales.count <- target.sales.count[indexes,]
new_tr <- model.matrix(~.,data = train)
new_ts <- model.matrix(~.,data = test)
lbl_train <- lbl_train.sales$V1
lbl_test <- lbl_test.sales$V1
dtrain <- xgb.DMatrix(data = new_tr,label = lbl_train)
dtest <- xgb.DMatrix(data = new_ts,label=lbl_test)
params <- list(booster = "gbtree",
objective = "binary:logistic",
eta=0.01,
gamma=0,
max_depth=7,
min_child_weight=1,
subsample=1,
colsample_bytree=1)
set.seed(101)
xgb.sales <- xgb.train (params = params,
data = dtrain,
nrounds = 510,
watchlist = list(val=dtest,train=dtrain),
print_every_n = 10,
early_stopping_rounds = 10,
maximize = T ,
eval_metric = "auc")
mat <- xgb.importance (feature_names = colnames(new_tr),model = xgb.sales)
xgb.plot.importance (importance_matrix = mat)
historicSales <- df[df$File_Type=="Historical",]
activeInv <- df[df$File_Type=="Active",]
summary(historicSales)
length(unique(historicSales$SKU_number))
length(unique(activeInv$SKU_number))
setdiff(activeInv$SKU_number,historicSales$SKU_number)
invSalesRecord <- activeInv[activeInv$SKU_number %in% historicSales$SKU_number,]
historicSales[, `:=`(msc=mean(ItemCount)), by=ReleaseYear]
cols = c("File_Type","MarketingType")
head(scale(historicSales[,!cols,with=FALSE]))
M <- cor(scale(historicSales[,!cols,with=FALSE]))
corrplot(M, method="number")
x <- df[, `:=`(CNT=.N), by=SKU_number]
historicSales <- df[df$File_Type=="Historical",]
activeInv <- df[df$File_Type=="Active",]
target.sales <- as.data.table(historicSales$SoldFlag)
target.sales.count <- as.data.table(historicSales$SoldCount)
cols = c("File_Type","Order","SKU_number")
historicSales <- historicSales[,!cols,with=FALSE]
historicSales[, `:=`(mic=mean(ItemCount)), by=ReleaseYear]
historicSales$MarketingType <- ifelse(historicSales$MarketingType == "D",1,2)
historicSales$SoldFlag <- as.factor(historicSales$SoldFlag)
historicSales1 <- SMOTE(SoldFlag ~ . ,
data= historicSales, perc.over = 100, perc.under = 200)
target.sales <- as.data.table(as.numeric(as.character(historicSales1$SoldFlag)))
target.sales.count <- as.data.table(historicSales1$SoldCount)
historicSales <- historicSales1[,!c("SoldFlag","SoldCount"),with=FALSE]
testSize <- 0.2
indexes = sample(1:nrow(historicSales), size=testSize*nrow(historicSales))
test <- historicSales[indexes,]
train <- historicSales[-indexes,]
lbl_train.sales <- target.sales[-indexes,]
lbl_test.sales <- target.sales[indexes,]
lbl_train.sales.count <- target.sales.count[-indexes,]
lbl_test.sales.count <- target.sales.count[indexes,]
new_tr <- model.matrix(~.,data = train)
new_ts <- model.matrix(~.,data = test)
lbl_train <- lbl_train.sales$V1
lbl_test <- lbl_test.sales$V1
dtrain <- xgb.DMatrix(data = new_tr,label = lbl_train)
dtest <- xgb.DMatrix(data = new_ts,label=lbl_test)
params <- list(booster = "gbtree",
objective = "binary:logistic",
eta=0.01,
gamma=0,
max_depth=7,
min_child_weight=1,
subsample=1,
colsample_bytree=1)
set.seed(101)
xgb.sales <- xgb.train (params = params,
data = dtrain,
nrounds = 510,
watchlist = list(val=dtest,train=dtrain),
print_every_n = 10,
early_stopping_rounds = 10,
maximize = T ,
eval_metric = "auc")
mat <- xgb.importance (feature_names = colnames(new_tr),model = xgb.sales)
xgb.plot.importance (importance_matrix = mat)
xgbpred <- predict (xgb.sales,dtest)
plot(pROC::roc(response = lbl_test.sales$V1,
predictor = xgbpred,
levels=c(0, 1)),lwd=1.5)
test$pred <- xgbpred
ggplot(test, aes(x=pred, colour =factor(lbl_test.sales$V1),
fill = factor(lbl_test.sales$V1), alpha = 0.3)) +
geom_density()
xgbpred <- ifelse (xgbpred > 0.5,1,0)
confusionMatrix (xgbpred, lbl_test)
xgb.plot.importance (importance_matrix = mat)
View(historicSales)
historicSales <- df[df$File_Type=="Historical",]
activeInv <- df[df$File_Type=="Active",]
summary(historicSales)
length(unique(historicSales$SKU_number))
length(unique(activeInv$SKU_number))
setdiff(activeInv$SKU_number,historicSales$SKU_number)
invSalesRecord <- activeInv[activeInv$SKU_number %in% historicSales$SKU_number,]
historicSales[, `:=`(msc=mean(ItemCount)), by=ReleaseYear]
cols = c("File_Type","MarketingType")
head(scale(historicSales[,!cols,with=FALSE]))
M <- cor(scale(historicSales[,!cols,with=FALSE]))
corrplot(M, method="number")
df <- fread("../data/SalesKaggle3.csv")
historicSales <- df[df$File_Type=="Historical",]
activeInv <- df[df$File_Type=="Active",]
summary(historicSales)
historicSales[, `:=`(mic=mean(ItemCount)), by=ReleaseYear]
cols = c("File_Type","MarketingType")
head(scale(historicSales[,!cols,with=FALSE]))
M <- cor(scale(historicSales[,!cols,with=FALSE]))
corrplot(M, method="number")
x <- df[, `:=`(CNT=.N), by=SKU_number]
